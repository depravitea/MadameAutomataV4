generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PendingType {
  own
  protect
  contract
  consider
}

model Guild {
  id            String   @id
  logChannelId  String?
  domRoleId     String?
  subRoleId     String?
  blindfoldRole String?
  markFormat    String?
  themePrimary  String?
  users         User[]
  relationships Relationship[]
  punishments   Punishment[]
  tasks         Task[]
  reminders     Reminder[]
  contracts     Contract[]
  consents      Consent[]
  profiles      Profile[]
  featureflags  FeatureFlag[]
  jails         Jail[]
  economytxs    EconomyTx[]
  riddles       Riddle[]
  logentries    LogEntry[]
  quizzes       QuizResult[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id        String  @id
  guildId   String
  guild     Guild   @relation(fields: [guildId], references: [id], onDelete: Cascade)
  nickname  String?
  isDom     Boolean?
  claimsAsDom Relationship[] @relation("dom")
  claimsAsSub Relationship[] @relation("sub")
  createdAt DateTime @default(now())
}

model Relationship {
  id        String @id @default(cuid())
  guildId   String
  domId     String
  subId     String
  status    String
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  dom   User  @relation("dom", fields: [domId], references: [id], onDelete: Cascade)
  sub   User  @relation("sub", fields: [subId], references: [id], onDelete: Cascade)
}

model Punishment {
  id        String   @id @default(cuid())
  guildId   String
  targetId  String
  kind      String
  reason    String?
  expiresAt DateTime?
  createdBy String
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Task {
  id        String   @id @default(cuid())
  guildId   String
  assignee  String
  assigner  String
  title     String
  dueAt     DateTime?
  doneAt    DateTime?
  warnedAt  DateTime?
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Reminder {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  content   String
  runAt     DateTime
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Contract {
  id        String   @id @default(cuid())
  guildId   String
  domId     String
  subId     String
  terms     String
  status    String
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Consent {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  limits    String
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Profile {
  id            String  @id
  guildId       String
  userId        String  @unique
  xp            Int     @default(0)
  gems          Int     @default(0)
  simpCount     Int     @default(0)
  bratScore     Int     @default(0)

  about         String?
  limits        String?
  kinks         String?
  title         String?

  starCount     Int     @default(0)
  jailedCount   Int     @default(0)
  praiseCount   Int     @default(0)
  worshipCount  Int     @default(0)
  tasksDone     Int     @default(0)
  dynamicsEnded Int     @default(0)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model FeatureFlag {
  id      String  @id @default(cuid())
  guildId String
  key     String
  enabled Boolean @default(false)
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  @@unique([guildId, key])
}

model Jail {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  locked    Boolean  @default(true)
  reason    String?
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model EconomyTx {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  kind      String
  amount    Int
  meta      String?
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Riddle {
  id        String   @id @default(cuid())
  guildId   String
  channelId String
  question  String
  answer    String
  hint      String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model LogEntry {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  content   String
  private   Boolean  @default(false)
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model QuizResult {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  result    String
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model PendingRequest {
  id        String      @id @default(cuid())
  guildId   String
  type      PendingType
  domId     String
  subId     String
  payload   String      @default("{}")
  createdAt DateTime    @default(now())
}

model Praise {
  id        String   @id @default(cuid())
  guildId   String
  domId     String
  subId     String
  note      String
  createdAt DateTime  @default(now())
}

model Worship {
  id        String   @id @default(cuid())
  guildId   String
  domId     String
  subId     String
  text      String
  createdAt DateTime  @default(now())
}

model GoldStar {
  id        String   @id @default(cuid())
  guildId   String
  domId     String
  subId     String
  delta     Int
  reason    String?
  createdAt DateTime  @default(now())
}
