generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* NEW: types for the offer flows */
enum PendingType {
  own
  protect
  contract
  consider
}

model Guild {
  id            String   @id
  logChannelId  String?
  domRoleId     String?
  subRoleId     String?
  blindfoldRole String?
  markFormat    String?
  themePrimary  String?
  users         User[]
  relationships Relationship[]
  punishments   Punishment[]
  tasks         Task[]
  reminders     Reminder[]
  contracts     Contract[]
  consents      Consent[]
  profiles      Profile[]
  featureflags  FeatureFlag[]
  jails         Jail[]
  economytxs    EconomyTx[]
  riddles       Riddle[]
  logentries    LogEntry[]
  quizzes       QuizResult[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model User {
  id        String  @id
  guildId   String
  guild     Guild   @relation(fields: [guildId], references: [id], onDelete: Cascade)
  nickname  String?
  isDom     Boolean?
  claimsAsDom Relationship[] @relation("dom")
  claimsAsSub Relationship[] @relation("sub")
  createdAt DateTime @default(now())
}

model Relationship {
  id        String @id @default(cuid())
  guildId   String
  domId     String
  subId     String
  status    String            // e.g. "active", "consider"
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
  dom   User  @relation("dom", fields: [domId], references: [id], onDelete: Cascade)
  sub   User  @relation("sub", fields: [subId], references: [id], onDelete: Cascade)
}

model Punishment {
  id        String   @id @default(cuid())
  guildId   String
  targetId  String
  kind      String
  reason    String?
  expiresAt DateTime?
  createdBy String
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Task {
  id        String   @id @default(cuid())
  guildId   String
  assignee  String           // sub
  assigner  String           // domme
  title     String
  dueAt     DateTime?
  doneAt    DateTime?
  warnedAt  DateTime?        // NEW: for “due soon” ping tracking
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Reminder {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  content   String
  runAt     DateTime
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Contract {
  id        String   @id @default(cuid())
  guildId   String
  domId     String
  subId     String
  terms     String            // can be long; ok as plain String
  status    String            // "active", "ended", etc.
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Consent {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  limits    String            // we use "PROTECTED" to mean protected
  createdAt DateTime @default(now())
  guild Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)
}

model Profile {
  id            String  @id
  guildId       String
  userId        String  @unique   // NEW: needed for upsert-by-user
  xp            Int     @default(0)
  gems          Int     @default(0)
  simpCount     Int     @default(0)
  bratScore     Int     @default(0)

  // NEW: shown in user p
